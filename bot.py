# bot.py - –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è Telegram AI News Bot
# –û–±'—î–¥–Ω—É—î –ª–æ–≥—ñ–∫—É FastAPI, Aiogram —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.
# –í–µ—Ä—Å—ñ—è: 2.0 (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞)

import os
import asyncio
import logging
import uuid
from datetime import datetime

import aiohttp
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.markdown import hbold, hitalic, hcode, hlink
from dotenv import load_dotenv
from fastapi import FastAPI, Request

# --- 1. –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –¢–ê –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü ---

load_dotenv()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
BOT_USERNAME = os.getenv("BOT_USERNAME", "YourNewsAIBot")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_API_URL = os.getenv("GEMINI_API_URL", "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_BOT_TOKEN")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–ª—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_PATH = f"/bot/{TELEGRAM_TOKEN}"
WEBHOOK_FULL_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å –∑ –ë–î
db_pool = None

# --- 2. –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á (–£–¢–ò–õ–Ü–¢–ò) ---

async def get_db_pool():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    global db_pool
    if db_pool is None:
        try:
            db_pool = await asyncpg.create_pool(DATABASE_URL)
            logger.info("–£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            raise
    return db_pool

async def execute_query(query, *args, fetch=None):
    """
    –í–∏–∫–æ–Ω—É—î SQL-–∑–∞–ø–∏—Ç –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø—É–ª—É –∑'—î–¥–Ω–∞–Ω—å.
    `fetch` –º–æ–∂–µ –±—É—Ç–∏ 'val' (–æ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è), 'row' (–æ–¥–∏–Ω —Ä—è–¥–æ–∫), 'all' (–≤—Å—ñ —Ä—è–¥–∫–∏).
    """
    try:
        pool = await get_db_pool()
        async with pool.acquire() as connection:
            if fetch == 'val':
                return await connection.fetchval(query, *args)
            elif fetch == 'row':
                return await connection.fetchrow(query, *args)
            elif fetch == 'all':
                return await connection.fetch(query, *args)
            else:
                return await connection.execute(query, *args)
    except (asyncpg.PostgresError, OSError) as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—É: {query}, args={args}. –ü–æ–º–∏–ª–∫–∞: {e}")
        return None # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏

def escape_markdown(text: str) -> str:
    """–ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è MarkdownV2."""
    if not isinstance(text, str):
        text = str(text)
    special_chars = r'_*[]()~`>#+-.=|{}!'
    return "".join(f"\\{char}" if char in special_chars else char for char in text)

async def generate_summary_with_ai(text_to_summarize: str) -> str:
    """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Gemini AI."""
    if not GEMINI_API_KEY:
        logger.error("GEMINI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
        return "–§—É–Ω–∫—Ü—ñ—è AI-—Ä–µ–∑—é–º–µ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    prompt = f"–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–µ, –∑–º—ñ—Å—Ç–æ–≤–Ω–µ —Ç–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤–∏–Ω–∏ –æ–¥–Ω–∏–º –∞–±–∑–∞—Ü–æ–º (3-4 —Ä–µ—á–µ–Ω–Ω—è) —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ü–æ—á–∏–Ω–∞–π –æ–¥—Ä–∞–∑—É –∑ —Å—É—Ç—ñ.\n\n–¢–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏:\n---\n{text_to_summarize}\n---\n\n–†–µ–∑—é–º–µ:"
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    headers = {"Content-Type": "application/json"}
    api_url = f"{GEMINI_API_URL}?key={GEMINI_API_KEY}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(api_url, json=payload, headers=headers, timeout=45) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get("candidates", [{}])[0].get("content", {}).get("parts", [{}])[0].get("text", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–µ–∑—é–º–µ.").strip()
                else:
                    error_text = await response.text()
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ Gemini API: {response.status} - {error_text}")
                    return f"–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤—ñ—Å—É AI: {response.status}"
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ Gemini API.")
        return "–°–µ—Ä–≤—ñ—Å AI –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –≤—á–∞—Å–Ω–æ."
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É Gemini API: {e}")
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤—ñ—Å—É AI."

# --- 3. –°–¢–ê–ù–ò FSM (FINITE STATE MACHINE) ---

class Form(StatesGroup):
    add_source_link = State()
    report_news_id = State()
    report_reason = State()
    feedback_message = State()
    filter_keyword = State()
    comment_news_id = State()
    comment_content = State()
    view_comments_news_id = State()

# --- 4. –ö–õ–ê–í–Ü–ê–¢–£–†–ò ---

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∞ –ú–æ—è —Å—Ç—Ä—ñ—á–∫–∞"), KeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–∏")],
        [KeyboardButton(text="üéØ –§—ñ–ª—å—Ç—Ä–∏"), KeyboardButton(text="üîñ –ó–∞–∫–ª–∞–¥–∫–∏")],
        [KeyboardButton(text="üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"), KeyboardButton(text="üí¨ –î–æ–ø–æ–º–æ–≥–∞")],
    ], resize_keyboard=True
)

# –ú–µ–Ω—é –¥–æ–ø–æ–º–æ–≥–∏
help_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data="action_feedback")],
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ", callback_data="action_add_source")],
        [InlineKeyboardButton(text="‚úâÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞", callback_data="action_invite")],
    ]
)

# --- 5. –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê –¢–ê –î–ò–°–ü–ï–¢–ß–ï–†–ê ---

storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.MARKDOWN_V2)
dp = Dispatcher(storage=storage)

# --- 6. –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ---

@dp.message(Command("cancel"))
@dp.message(F.text.casefold() == "–≤—ñ–¥–º—ñ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    """–î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—É–¥—å-—è–∫—É –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        return

    await state.clear()
    await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_keyboard)

@dp.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    await state.clear() # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–æ—Å—å —Ä–æ–±–∏–≤
    user = message.from_user
    inviter_id = None
    
    # –û–±—Ä–æ–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    try:
        payload = message.text.split(maxsplit=1)[1]
        inviter_user_id_record = await execute_query("SELECT user_id FROM invites WHERE invite_code = $1 AND accepted_at IS NULL", payload, fetch='row')
        if inviter_user_id_record:
            inviter_id = inviter_user_id_record['user_id']
    except IndexError:
        pass

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_db_id = await execute_query(
        """INSERT INTO users (telegram_id, username, first_name, language_code, inviter_id, last_active)
           VALUES ($1, $2, $3, $4, $5, NOW())
           ON CONFLICT (telegram_id) DO UPDATE SET
               username = EXCLUDED.username, first_name = EXCLUDED.first_name, last_active = NOW()
           RETURNING id;""",
        user.id, user.username, user.first_name, user.language_code, inviter_id, fetch='val'
    )

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if user_db_id:
        await execute_query("INSERT INTO user_stats (user_id) VALUES ($1) ON CONFLICT DO NOTHING;", user_db_id)
        if inviter_id:
            await execute_query("UPDATE invites SET accepted_at = NOW(), invited_user_id = $1 WHERE invite_code = $2", user_db_id, payload)
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤
            
    welcome_text = f"–ü—Ä–∏–≤—ñ—Ç, {hbold(escape_markdown(user.first_name))} üëã\n\n–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π AI\\-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–∏–Ω.\n–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏."
    await message.answer(welcome_text, reply_markup=main_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text == "üì∞ –ú–æ—è —Å—Ç—Ä—ñ—á–∫–∞")
async def handle_show_news(message: Message):
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É—î –æ–¥–Ω—É –Ω–æ–≤–∏–Ω—É
    user_db_id = await execute_query("SELECT id FROM users WHERE telegram_id = $1", message.from_user.id, fetch='val')
    if not user_db_id:
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è.")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
    keywords = await execute_query("SELECT keywords FROM filters WHERE user_id = $1", user_db_id, fetch='val') or []
    
    news_item = await execute_query(
        """SELECT id, title, content, link, source, file_id, media_type FROM news
           WHERE moderation_status = 'approved' AND expires_at > NOW()
           AND id NOT IN (SELECT news_id FROM user_news_views WHERE user_id = $1)
           AND (COALESCE(array_length($2::text[], 1), 0) = 0 OR content ILIKE ANY(ARRAY(SELECT '%' || k || '%' FROM unnest($2) AS k)))
           ORDER BY published_at DESC LIMIT 1;""",
        user_db_id, keywords, fetch='row'
    )

    if not news_item:
        return await message.answer("‚úÖ –ù–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –∑–∞ –≤–∞—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–µ–º–∞—î. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
    await execute_query("INSERT INTO user_news_views (user_id, news_id, viewed) VALUES ($1, $2, TRUE) ON CONFLICT DO NOTHING;", user_db_id, news_item['id'])
    await execute_query("UPDATE user_stats SET viewed = viewed + 1, last_active = NOW() WHERE user_id = $1;", user_db_id)

    title = escape_markdown(news_item['title'])
    content_short = escape_markdown((news_item['content'] or '')[:700] + '...')
    text = f"{hbold(title)}\n\n{content_short}\n\n{hitalic(f"–î–∂–µ—Ä–µ–ª–æ: {escape_markdown(news_item['source'])}")}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç", callback_data=f"act_like_{news_item['id']}"),
            InlineKeyboardButton(text="üëé", callback_data=f"act_dislike_{news_item['id']}"),
            InlineKeyboardButton(text="üîñ", callback_data=f"act_save_{news_item['id']}"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data="act_skip_news"),
        ],
        [InlineKeyboardButton(text="üìù –ö–æ—Ä–æ—Ç–∫–æ (AI)", callback_data=f"ai_summary_{news_item['id']}")],
        [InlineKeyboardButton(text="üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ", callback_data=f"comm_view_{news_item['id']}"),
         InlineKeyboardButton(text="‚ùó –ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å", callback_data=f"rep_news_{news_item['id']}")]
    ] + ([[InlineKeyboardButton(text="üåê –ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é", url=news_item['link'])]] if news_item['link'] else []))
    
    try:
        if news_item.get('file_id') and news_item.get('media_type') == 'photo':
            await message.answer_photo(photo=news_item['file_id'], caption=text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard, disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–∏–Ω–∏ {news_item['id']}: {e}")
        await message.answer(text, reply_markup=keyboard, disable_web_page_preview=True)


@dp.callback_query(F.data.startswith("act_"))
async def handle_news_actions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∑ –Ω–æ–≤–∏–Ω–æ—é: –ª–∞–π–∫, –¥–∏–∑–ª–∞–π–∫, –∑–±–µ—Ä–µ–≥—Ç–∏, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏."""
    action_data = callback.data.split('_')
    action = action_data[1]
    
    user_db_id = await execute_query("SELECT id FROM users WHERE telegram_id = $1", callback.from_user.id, fetch='val')
    if not user_db_id: return await callback.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.", show_alert=True)
    
    if action == "skip":
        await callback.message.delete()
        return await handle_show_news(callback.message) # –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É
    
    news_id = int(action_data[2])
    if action == "like":
        await execute_query("UPDATE user_stats SET liked_count = liked_count + 1 WHERE user_id = $1", user_db_id)
        await callback.answer("‚ù§Ô∏è –í–ø–æ–¥–æ–±–∞–Ω–æ!")
    elif action == "dislike":
        await execute_query("UPDATE user_stats SET disliked_count = disliked_count + 1 WHERE user_id = $1", user_db_id)
        await callback.answer("üíî –ù–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å.")
    elif action == "save":
        await execute_query("INSERT INTO bookmarks (user_id, news_id) VALUES ($1, $2) ON CONFLICT DO NOTHING", user_db_id, news_id)
        await execute_query("UPDATE user_stats SET saved = saved + 1 WHERE user_id = $1", user_db_id)
        await callback.answer("üîñ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∑–∞–∫–ª–∞–¥–∫–∏!")

@dp.callback_query(F.data.startswith("ai_summary_"))
async def handle_ai_summary_callback(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î AI-—Ä–µ–∑—é–º–µ –Ω–æ–≤–∏–Ω–∏."""
    news_id = int(callback.data.split('_')[2])
    
    await callback.answer("‚è≥ –ì–µ–Ω–µ—Ä—É—é –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ...", show_alert=False)
    summary = await execute_query("SELECT summary FROM summaries WHERE news_id = $1", news_id, fetch='val')
    
    if not summary:
        content = await execute_query("SELECT content FROM news WHERE id = $1", news_id, fetch='val')
        if not content: return await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ü—ñ—î—ó –Ω–æ–≤–∏–Ω–∏.")
        
        summary = await generate_summary_with_ai(content)
        if "–ü–æ–º–∏–ª–∫–∞" not in summary and "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" not in summary:
            await execute_query("INSERT INTO summaries (news_id, summary) VALUES ($1, $2) ON CONFLICT DO NOTHING", news_id, summary)

    await callback.message.answer(f"üìù *AI\\-–†–µ–∑—é–º–µ:*\n\n{escape_markdown(summary)}")

@dp.message(F.text == "üî• –¢—Ä–µ–Ω–¥–∏")
async def handle_trending_news(message: Message):
    """–ü–æ–∫–∞–∑—É—î 5 –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö –Ω–æ–≤–∏–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏."""
    trending_news = await execute_query(
        """SELECT n.id, n.title, COUNT(v.id) as views
           FROM news n JOIN user_news_views v ON n.id = v.news_id
           WHERE v.first_viewed_at > NOW() - INTERVAL '24 hours'
           GROUP BY n.id, n.title ORDER BY views DESC LIMIT 5;""",
        fetch='all'
    )
    if not trending_news:
        return await message.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω–¥–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω.")
        
    text = hbold("üî• –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–µ –∑–∞ –¥–æ–±—É:\n\n")
    text += "\n".join(f"‚ñ´Ô∏è {hlink(escape_markdown(item['title']), f'https://t.me/{BOT_USERNAME}?start=news_{item["id"]}')} ({item["views"]} –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤)" for item in trending_news)
    await message.answer(text, disable_web_page_preview=True)

@dp.message(F.text == "üîñ –ó–∞–∫–ª–∞–¥–∫–∏")
async def handle_bookmarks(message: Message):
    """–ü–æ–∫–∞–∑—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_db_id = await execute_query("SELECT id FROM users WHERE telegram_id = $1", message.from_user.id, fetch='val')
    bookmarks = await execute_query(
        "SELECT n.id, n.title FROM news n JOIN bookmarks b ON n.id = b.news_id WHERE b.user_id = $1 ORDER BY b.created_at DESC LIMIT 20;",
        user_db_id, fetch='all'
    )
    if not bookmarks:
        return await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–æ–≤–∏–Ω.")
    
    text = hbold("üîñ –í–∞—à—ñ –∑–∞–∫–ª–∞–¥–∫–∏:\n\n")
    text += "\n".join(f"‚ñ´Ô∏è {hlink(escape_markdown(item['title']), f'https://t.me/{BOT_USERNAME}?start=news_{item["id"]}')}" for item in bookmarks)
    await message.answer(text, disable_web_page_preview=True)

@dp.message(F.text == "üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
async def handle_my_profile(message: Message):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    stats = await execute_query(
        """SELECT u.first_name, s.viewed, s.liked_count, s.saved, u.level, u.badges
           FROM user_stats s JOIN users u ON s.user_id = u.id
           WHERE u.telegram_id = $1;""",
        message.from_user.id, fetch='row'
    )
    if not stats: return await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ /start")
    
    text = (
        f"üë§ {hbold(escape_markdown(stats['first_name']))}\n\n"
        f"‚ñ´Ô∏è –†—ñ–≤–µ–Ω—å: {hcode(stats['level'])}\n"
        f"‚ñ´Ô∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ –Ω–æ–≤–∏–Ω: {hcode(stats['viewed'])}\n"
        f"‚ñ´Ô∏è –õ–∞–π–∫—ñ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {hcode(stats['liked_count'])}\n"
        f"‚ñ´Ô∏è –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∑–∞–∫–ª–∞–¥–∫–∏: {hcode(stats['saved'])}\n"
        f"‚ñ´Ô∏è –ù–∞–≥–æ—Ä–æ–¥–∏: {hcode(escape_markdown(', '.join(stats['badges'])) if stats['badges'] else '–ù–µ–º–∞—î')}"
    )
    await message.answer(text)

@dp.message(F.text == "üí¨ –î–æ–ø–æ–º–æ–≥–∞")
async def handle_help_menu(message: Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=help_keyboard)
    
@dp.callback_query(F.data.startswith("action_"))
async def handle_help_actions(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split('_')[1]
    await callback.answer()

    if action == "feedback":
        await state.set_state(Form.feedback_message)
        await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫ –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é. –ú–∏ —Ü—ñ–Ω—É—î–º–æ –≤–∞—à—É –¥—É–º–∫—É!")
    elif action == "add_source":
        await state.set_state(Form.add_source_link)
        await callback.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ (Telegram-–∫–∞–Ω–∞–ª, RSS-—Å—Ç—Ä—ñ—á–∫–∞ –∞–±–æ —Å–∞–π—Ç).")
    elif action == "invite":
        user_db_id = await execute_query("SELECT id FROM users WHERE telegram_id = $1", callback.from_user.id, fetch='val')
        invite_code = str(uuid.uuid4())[:8]
        await execute_query("INSERT INTO invites (user_id, invite_code) VALUES ($1, $2)", user_db_id, invite_code)
        invite_link = f"https://t.me/{BOT_USERNAME}?start={invite_code}"
        await callback.message.answer(f"‚úâÔ∏è –ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–∑—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –±–æ–Ω—É—Å–∏\\!\n\n–í–∞—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n{hcode(invite_link)}")


@dp.message(Form.feedback_message)
async def process_feedback(message: Message, state: FSMContext):
    user_db_id = await execute_query("SELECT id FROM users WHERE telegram_id = $1", message.from_user.id, fetch='val')
    await execute_query("INSERT INTO feedback (user_id, message) VALUES ($1, $2)", user_db_id, message.text)
    await state.clear()
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!")


@dp.message(Form.add_source_link)
async def process_add_source(message: Message, state: FSMContext):
    user_db_id = await execute_query("SELECT id FROM users WHERE telegram_id = $1", message.from_user.id, fetch='val')
    link = message.text
    source_type = "website"
    if "t.me" in link: source_type = "telegram"
    elif "rss" in link or ".xml" in link: source_type = "rss"
        
    await execute_query("INSERT INTO sources (link, type, added_by_user_id) VALUES ($1, $2, $3) ON CONFLICT DO NOTHING", link, source_type, user_db_id)
    await state.clear()
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –î–∂–µ—Ä–µ–ª–æ –¥–æ–¥–∞–Ω–æ —ñ –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.")


# --- 7. FastAPI WEBHOOK ---

app = FastAPI(docs_url=None, redoc_url=None)

@app.on_event("startup")
async def on_startup():
    """–î—ñ—ó –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –¥–æ–¥–∞—Ç–∫—É: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞."""
    await get_db_pool()
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBHOOK_FULL_URL:
        await bot.set_webhook(url=WEBHOOK_FULL_URL, allowed_updates=dp.resolve_used_update_types())
        logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–µ–±—Ö—É–∫: {WEBHOOK_FULL_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    """–î—ñ—ó –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –¥–æ–¥–∞—Ç–∫—É: –∑–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω—å."""
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
    if db_pool:
        await db_pool.close()
        logger.info("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –¥–æ –ë–î –∑–∞–∫—Ä–∏—Ç–æ.")
    await bot.session.close()

@app.post(WEBHOOK_PATH)
async def bot_webhook(request: Request):
    """–ï–Ω–¥–ø–æ—ñ–Ω—Ç, —â–æ –ø—Ä–∏–π–º–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram."""
    update = types.Update.model_validate(await request.json(), context={"bot": bot})
    await dp.feed_update(bot=bot, update=update)
    return {"status": "ok"}

@app.get("/")
def healthcheck():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É."""
    return {"status": "ok", "version": "2.0"}

